{"version":3,"sources":["../../../src/api/controllers/invoiceController.js"],"names":["findAll","req","res","next","Invoice","find","then","json","invoices","create","schema","Joi","object","keys","item","string","required","date","due","qty","number","integer","tax","optional","rate","validate","body","error","value","details","status","invoice","catch","err"],"mappings":";;;;;;AAAA;;;;AAEA;;;;;;kBAEe;AACXA,WADW,mBACHC,GADG,EACEC,GADF,EACOC,IADP,EACa;AACpBC,0BAAQC,IAAR,GAAeC,IAAf,CAAoB;AAAA,mBAAYJ,IAAIK,IAAJ,CAASC,QAAT,CAAZ;AAAA,SAApB;AACH,KAHU;AAIXC,UAJW,kBAIJR,GAJI,EAICC,GAJD,EAIM;AACb,YAAMQ,SAASC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC7BC,kBAAMH,cAAII,MAAJ,GAAaC,QAAb,EADuB;AAE7BC,kBAAMN,cAAIM,IAAJ,GAAWD,QAAX,EAFuB;AAG7BE,iBAAKP,cAAIM,IAAJ,GAAWD,QAAX,EAHwB;AAI7BG,iBAAKR,cAAIS,MAAJ,GACAC,OADA,GAEAL,QAFA,EAJwB;AAO7BM,iBAAKX,cAAIS,MAAJ,GAAaG,QAAb,EAPwB;AAQ7BC,kBAAMb,cAAIS,MAAJ,GAAaG,QAAb;AARuB,SAAlB,CAAf;;AADa,4BAWYZ,cAAIc,QAAJ,CAAaxB,IAAIyB,IAAjB,EAAuBhB,MAAvB,CAXZ;AAAA,YAWLiB,KAXK,iBAWLA,KAXK;AAAA,YAWEC,KAXF,iBAWEA,KAXF;;AAYb,YAAGD,SAASA,MAAME,OAAlB,EAA2B;AACvB,mBAAO3B,IAAI4B,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqBoB,KAArB,CAAP;AACH;AACDvB,0BAAQK,MAAR,CAAemB,KAAf,EACKtB,IADL,CACU;AAAA,mBAAWJ,IAAIK,IAAJ,CAASwB,OAAT,CAAX;AAAA,SADV,EAEKC,KAFL,CAEY;AAAA,mBAAO9B,IAAI4B,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqB0B,GAArB,CAAP;AAAA,SAFZ;AAGH;AAtBU,C","file":"invoiceController.js","sourcesContent":["import Joi from 'joi';\n\nimport Invoice from '../models/invoice';\n\nexport default {\n    findAll(req, res, next) {\n        Invoice.find().then(invoices => res.json(invoices));\n    },\n    create(req, res) {\n        const schema = Joi.object().keys({\n            item: Joi.string().required(),\n            date: Joi.date().required(),\n            due: Joi.date().required(),\n            qty: Joi.number()\n                .integer()\n                .required(),\n            tax: Joi.number().optional(),\n            rate: Joi.number().optional()\n        });\n        const { error, value } = Joi.validate(req.body, schema);\n        if(error && error.details) {\n            return res.status(400).json(error);\n        }\n        Invoice.create(value)\n            .then(invoice => res.json(invoice))\n            .catch( err => res.status(500).json(err));\n    }\n};\n"]}